from PIL.Image import Image


class Fractale:
    def __init__(self, real: float = 0, imaginary: float = 0,
                 pixel: float = 0.01, iterations: int = 2_000,
                 r: int = 3, g: int = 1, b: int = 10, width: int = 128,
                 height: int = 128) -> None: ...

    def __repr__(self): ...

    def get_real(self) -> float: ...

    def set_real(self, real: float) -> None: ...

    def get_imaginary(self) -> float: ...

    def set_imaginary(self, imaginary: float): ...

    def get_zoom(self) -> int: ...

    def get_iteration_max(self) -> int: ...

    def get_red(self) -> int: ...

    def get_green(self) -> int: ...

    def get_blue(self) -> int: ...

    def rgb(self) -> tuple[int, int, int]: ...

    def set_color(self, r: int, g: int, b: int) -> None: ...

    def set_iteration_max(self, iteration_max: int) -> None: ...

    def iterations_sum(self) -> int: ...

    def iterations_per_pixel(self) -> int: ...

    def iterations_per_second(self) -> int: ...

    def image(self) -> Image: ...

    def resize(self, width: int, height: int) -> None: ...

    def screenshot(self, width: int, height: int) -> Image: ...

    def top(self) -> None: ...

    def middle_zoom(self, multiplier: float) -> None: ...

    def zoom(self, x: int, y: int, multiplier: float) -> None: ...

    def reset(self) -> None: ...

    def get_width(self) -> int: ...

    def get_height(self) -> int: ...


class Julia(Fractale):
    def __init__(self, real: float = 0, imaginary: float = 0,
                 pixel: float = 0.01, iterations: int = 2_000,
                 r: int = 3, g: int = 1, b: int = 10, width: int = 128,
                 height: int = 128) -> None: ...

    def mandelbrot(self, w: int, h: int) -> "Mandelbrot": ...


class Mandelbrot(Fractale):
    def __init__(self, real: float = 0, imaginary: float = 0,
                 pixel: float = 0.01, iterations: int = 2_000,
                 r: int = 3, g: int = 1, b: int = 10, width: int = 128,
                 height: int = 128) -> None: ...

    def julia(self, julia: "Julia", w: int, h: int, x: int,
              y: int) -> "Julia": ...

    def code(self) -> str: ...

    def from_code(self, code: str) -> None: ...

    def data(self) -> bytes: ...

    def from_data(self, bytes_: bytes) -> None: ...
